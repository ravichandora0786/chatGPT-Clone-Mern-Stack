[{"C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\index.js":"1","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\App.js":"2","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\reportWebVitals.js":"3","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\components\\Navbar.js":"4","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Login.js":"5","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Paragraph.js":"6","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\JsConverter.js":"7","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\ChatBot.js":"8","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Register.js":"9","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Homepage.js":"10","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\ScifiImage.js":"11","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Summary\\Summary.js":"12"},{"size":628,"mtime":1692180163060,"results":"13","hashOfConfig":"14"},{"size":1198,"mtime":1692180650755,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1692180199087,"results":"16","hashOfConfig":"14"},{"size":1190,"mtime":1692165518872,"results":"17","hashOfConfig":"14"},{"size":2212,"mtime":1692007568430,"results":"18","hashOfConfig":"14"},{"size":2106,"mtime":1692165345679,"results":"19","hashOfConfig":"14"},{"size":2159,"mtime":1692165371071,"results":"20","hashOfConfig":"14"},{"size":1989,"mtime":1692678347444,"results":"21","hashOfConfig":"14"},{"size":2408,"mtime":1692007587316,"results":"22","hashOfConfig":"14"},{"size":4040,"mtime":1692680464540,"results":"23","hashOfConfig":"14"},{"size":2315,"mtime":1692165360632,"results":"24","hashOfConfig":"14"},{"size":2178,"mtime":1692180567971,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x73d7p",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},"C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\index.js",[],[],"C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\App.js",["69"],[],"import \"./App.css\";\nimport { Routes, Route } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { useMemo } from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport Navbar from \"./components/Navbar\";\nimport Homepage from \"./pages/Homepage\";\nimport Register from \"./pages/Register\";\nimport Login from \"./pages/Login\";\nimport Summary from \"./pages/Summary/Summary\";\nimport Paragraph from \"./pages/Paragraph\";\nimport ChatBot from \"./pages/ChatBot\";\nimport JsConverter from \"./pages/JsConverter\";\nimport ScifiImage from \"./pages/ScifiImage\";\n\nfunction App() {\n \n  return (\n    <>\n        <Navbar />\n        <Toaster />\n        <Routes>\n          <Route path=\"/\" element={<Homepage />} />\n          <Route path=\"/register\" element={<Register />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/summary\" element={<Summary />} />\n          <Route path=\"/paragraph\" element={<Paragraph />} />\n          <Route path=\"/chatbot\" element={<ChatBot />} />\n          <Route path=\"/js-converter\" element={<JsConverter />} />\n          <Route path=\"/scifi-image\" element={<ScifiImage />} />\n        </Routes>\n     \n    </>\n  );\n}\n\nexport default App;\n","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\reportWebVitals.js",[],[],"C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\components\\Navbar.js",[],[],"C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Login.js",["70"],[],"import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport axios from \"axios\";\nimport './Login.css'\n\nconst Login = () => {\n  const navigate = useNavigate();\n\n  // states\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:5000/api/v1/auth/login\", { email, password });\n      toast.success(\"Login Successfully\");\n      localStorage.setItem(\"authToken\", true);\n      navigate(\"/\");\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return (\n    <div\n    className={`signin-container ${error ? 'error' : ''}`}\n    style={{\n      width:  '30%',\n      margin: '2rem auto',\n      padding: '2rem',\n      borderRadius: '5px',\n      boxShadow: '5px 5px 5px rgba(0, 0, 0, 0.1)',\n      backgroundColor:\" var(--color-bg-variant)\", // Change to your desired background color\n    }}\n  >\n    {error && <div className=\"error-message\">{error}</div>}\n    <form onSubmit={handleSubmit}>\n    <div  style={{justifyItems:\"center\",display:\"grid\",marginBottom:\"20px\"}}>\n    <h3 >Sign In</h3>\n    </div>\n   \n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        required\n        className=\"form-control\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        required\n        className=\"form-control\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <div className=\" mt-5 \" style={{justifyItems:\"center\",display:\"grid\"}}>\n      <button type=\"submit\" className=\"btnn\">Sign In</button>\n      </div>\n      <p className=\"mt-3\">\n        Don't have an account? <a href=\"/register\">Please Register</a>\n      </p>\n    </form>\n  </div>\n  );\n};\n\nexport default Login;\n","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Paragraph.js",["71","72"],[],"import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\n\nconst Paragraph = () => {\n\n  const navigate = useNavigate();\n\n  // states\n  const [text, settext] = useState(\"\");\n  const [para, setPara] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await axios.post(\"http://localhost:5000/api/v1/openai/paragraph\", { text });\n      console.log(data);\n      setPara(data);\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return (\n    <>\n    <div\n      className={`summarize-container ${error ? 'error' : ''}`}\n      style={{\n        width: '40%',\n        margin: '2rem auto',\n        padding: '1rem',\n        borderRadius: '5px',\n        boxShadow: '5px 5px 5px rgba(0, 0, 0, 0.1)',\n        backgroundColor: 'var(--color-primary)', // Change to your desired background color\n      }}\n    >\n      {error && <div className=\"error-message\">{error}</div>}\n      <form onSubmit={handleSubmit}>\n        <h3>Generate Paragraph</h3>\n        <div className=\"summary_text\">\n        <textarea\n          placeholder=\"Add your text\"\n          required\n          value={text}\n          onChange={(e) => settext(e.target.value)}\n        />\n        </div>\n        <div  style={{display:\"grid\", justifyItems:\"end\"}}>\n        <button className=\"btnn mb-3 \" type=\"submit\">Generate</button>\n        </div>\n        <div>\n        <p>\n          Not this tool? <a href=\"/\">GO BACK</a>\n        </p>\n        </div>\n       \n      </form>\n\n      <div className={`paragraph-card ${para ? '' : 'placeholder'}`}>\n        {para ? (\n          <p>{para}</p>\n        ) : (\n          <p className=\"placeholder-text\">Your Paragraph Will Appear Here</p>\n        )}\n      </div>\n    </div>\n  </>\n    \n  );\n};\n\nexport default Paragraph;\n","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\JsConverter.js",["73","74"],[],"import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\n\nconst JsConverter = () => {\n  const navigate = useNavigate();\n  // states\n  const [text, settext] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await axios.post(\"http://localhost:5000/api/v1/openai/js-converter\", {\n        text,\n      });\n      console.log(data);\n      setCode(data);\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return (\n    <>\n        <div\n      className={`js-converter-container ${error ? 'error' : ''}`}\n      style={{\n        width:'40%',\n        margin: '2rem auto',\n        padding: '2rem',\n        borderRadius: '5px',\n        boxShadow: '5px 5px 5px rgba(0, 0, 0, 0.1)',\n        backgroundColor: 'var(--color-primary)', // Change to your desired background color\n      }}\n    >\n      {error && <div className=\"error-message\">{error}</div>}\n      <form onSubmit={handleSubmit}>\n        <h3>JS Converter</h3>\n        <div className=\"summary_text\">\n        <textarea\n          placeholder=\"Type your text to convert...\"\n          required\n          value={text}\n          onChange={(e) => settext(e.target.value)}\n        />\n        </div>\n        <div  style={{display:\"grid\", justifyItems:\"end\"}}>\n        <button className=\"btnn mb-3\" type=\"submit\">Convert</button>\n        </div>\n        <div>\n        <p>\n          Not this tool? <a href=\"/\">GO BACK</a>\n        </p>\n        </div>\n      </form>\n\n      <div className={`code-card ${code ? '' : 'placeholder'}`}>\n        {code ? (\n          <pre>\n            <code>{code}</code>\n          </pre>\n        ) : (\n          <p className=\"placeholder-text\">Your Code Will Appear Here</p>\n        )}\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default JsConverter;\n","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\ChatBot.js",[],[],"C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Register.js",["75"],[],"import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport axios from \"axios\";\n\nconst Register = () => {\n  const navigate = useNavigate();\n  // states\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post(\"http://localhost:5000/api/v1/auth/register\", { username, email, password });\n      toast.success(\"User Register Successfully\");\n      navigate(\"/login\");\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return (\n\n    <div\n    className={`signup-container ${error ? 'error' : ''}`}\n    style={{\n      width:'30%' ,\n      margin: '2rem auto',\n      padding: '2rem',\n      borderRadius: '5px',\n      boxShadow: '5px 5px 5px rgba(0, 0, 0, 0.1)',\n      backgroundColor: 'var(--color-bg-variant)', // Change to your desired background color\n    }}\n  >\n    {error && <div className=\"error-message\">{error}</div>}\n    <form onSubmit={handleSubmit}>\n      <div style={{justifyItems:\"center\",display:\"grid\",marginBottom:\"20px\"}}><h3>Sign Up</h3></div>\n      <input\n        type=\"text\"\n        placeholder=\"Username\"\n        required\n        className=\"form-control \"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n      />\n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        required\n        className=\"form-control\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        required\n        className=\"form-control\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <div className=\"mt-5 \" style={{justifyItems:\"center\",display:\"grid\"}}>\n      <button type=\"submit\" className=\"btnn\">Sign up</button>\n      </div>\n      <p className=\"mt-3\">\n        Already have an account? <a href=\"/login\">Please Login</a>\n      </p>\n    </form>\n  </div>\n\n  );\n};\n\nexport default Register;\n","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Homepage.js",[],[],"C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\ScifiImage.js",["76","77","78"],[],"import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst ScifiImage = () => {\n  const navigate = useNavigate();\n\n  // states\n  const [text, settext] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await axios.post(\"http://localhost:5000/api/v1/openai/scifi-image\", { text });\n      console.log(data);\n      setImage(data);\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return (\n    <>\n      <div\n        className={`scifi-image-container ${error ? 'error' : ''}`}\n        style={{\n          width: '40%',\n          margin: '2rem auto',\n          padding: '2rem',\n          borderRadius: '5px',\n          boxShadow: '5px 5px 5px rgba(0, 0, 0, 0.1)',\n          backgroundColor:'var(--color-primary)', // Change to your desired background color\n        }}\n      >\n        {error && <div className=\"error-message\">{error}</div>}\n        <form onSubmit={handleSubmit}>\n          <h3>Scifi Image Generator</h3>\n          <div className=\"image_text\">\n            <textarea\n              placeholder=\"Type your text to generate an image...\"\n              required\n              value={text}\n              onChange={(e) => settext(e.target.value)}\n            />\n          </div>\n          <div style={{display:\"grid\", justifyItems:\"end\"}}>\n            <button className=\"btnn mb-3\" type=\"submit\">Generate</button>\n          </div>\n          <div>\n            <p>\n              Not this tool? <a href=\"/\">GO BACK</a>\n            </p>\n          </div>\n        </form>\n\n        <div className={`image-card ${image ? '' : 'placeholder'}`}>\n          {image ? (\n            <div className=\"image-wrapper\">\n              <img src={image} alt=\"Scifi Image\" />\n            </div>\n          ) : (\n            <p className=\"placeholder-text\">Your Scifi Image Will Appear Here</p>\n          )}\n        </div>\n      </div>\n    </>\n  \n  );\n};\n\nexport default ScifiImage;\n","C:\\projects\\chatGPT-Clone-Mern-Stack\\client\\src\\pages\\Summary\\Summary.js",["79","80"],[],"import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport './summary.css'\nimport axios from \"axios\";\n\n\nconst Summary = () => {\n  const navigate = useNavigate();\n  // states\n  const [text, settext] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await axios.post(\"http://localhost:5000/api/v1/openai/summary\", { text });\n      console.log(data);\n      setSummary(data);\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return (\n    <>\n      <div\n        className={`summarize-container ${error ? 'error' : ''}`}\n        style={{\n          width: '40%',\n          margin: '2rem auto',\n          padding: '1rem',\n          borderRadius: '5px',\n          boxShadow: '5px 5px 5px rgba(0, 0, 0, 0.1)',\n          backgroundColor: 'var(--color-primary)',\n        }}\n      >\n        {error && <div className=\"error-message\">{error}</div>}\n        <form onSubmit={handleSubmit}>\n          <h3>Summarize Text</h3>\n          <div className=\"summary_text\">\n          <textarea\n            placeholder=\"Add your text\"\n            required\n            value={text}\n            onChange={(e) => settext(e.target.value)}\n          />\n          </div>\n          <div  style={{display:\"grid\", justifyItems:\"end\"}}>\n          <button className=\"btnn mb-3 \" type=\"submit\">Submit</button>\n          </div>\n          <div>\n          <p>\n            Not this tool? <a href=\"/\">GO BACK</a>\n          </p>\n          </div>\n         \n        </form>\n\n        <div\n          className={`summary-card ${summary ? '' : 'placeholder'}`}\n        >\n          {summary ? (\n            <p>{summary}</p>\n          ) : (\n            <p className=\"placeholder-text\">Summary Will Appear Here</p>\n          )}\n        </div>\n      </div>\n    </>\n\n  );\n};\n\nexport default Summary;\n",{"ruleId":"81","severity":1,"message":"82","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":17},{"ruleId":"81","severity":1,"message":"85","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},{"ruleId":"81","severity":1,"message":"85","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},{"ruleId":"81","severity":1,"message":"86","line":8,"column":9,"nodeType":"83","messageId":"84","endLine":8,"endColumn":17},{"ruleId":"81","severity":1,"message":"85","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},{"ruleId":"81","severity":1,"message":"86","line":7,"column":9,"nodeType":"83","messageId":"84","endLine":7,"endColumn":17},{"ruleId":"81","severity":1,"message":"85","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},{"ruleId":"81","severity":1,"message":"85","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},{"ruleId":"81","severity":1,"message":"86","line":6,"column":9,"nodeType":"83","messageId":"84","endLine":6,"endColumn":17},{"ruleId":"87","severity":1,"message":"88","line":69,"column":15,"nodeType":"89","endLine":69,"endColumn":52},{"ruleId":"81","severity":1,"message":"85","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},{"ruleId":"81","severity":1,"message":"86","line":8,"column":9,"nodeType":"83","messageId":"84","endLine":8,"endColumn":17},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'navigate' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]