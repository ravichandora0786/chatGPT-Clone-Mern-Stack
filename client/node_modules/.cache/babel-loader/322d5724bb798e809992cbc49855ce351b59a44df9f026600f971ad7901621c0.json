{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport axios from \"axios\";\nimport { Box, Typography, useTheme, useMediaQuery, TextField, Button, Alert, Collapse, Card } from \"@mui/material\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const theme = useTheme();\n  const navigate = useNavigate();\n  //media\n  const isNotMobile = useMediaQuery(\"(min-width: 1000px)\");\n  // states\n  const [text, settext] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const {\n        data\n      } = await axios.post(\"http://localhost:5000/api/v1/openai/chatbot\", {\n        text\n      });\n      console.log(data);\n      setResponse(data);\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  // <Box\n  //   width={isNotMobile ? \"40%\" : \"80%\"}\n  //   p={\"2rem\"}\n  //   m={\"2rem auto\"}\n  //   borderRadius={5}\n  //   sx={{ boxShadow: 5 }}\n  //   backgroundColor={theme.palette.background.alt}\n  // >\n  //   <Collapse in={error}>\n  //     <Alert severity=\"error\" sx={{ mb: 2 }}>\n  //       {error}\n  //     </Alert>\n  //   </Collapse>\n  //   <form onSubmit={handleSubmit}>\n  //     <Typography variant=\"h3\">Ask with Chatbot</Typography>\n\n  //     <TextField\n  //       placeholder=\"add your text\"\n  //       type=\"text\"\n  //       multiline={true}\n  //       required\n  //       margin=\"normal\"\n  //       fullWidth\n  //       value={text}\n  //       onChange={(e) => {\n  //         settext(e.target.value);\n  //       }}\n  //     />\n\n  //     <Button\n  //       type=\"submit\"\n  //       fullWidth\n  //       variant=\"contained\"\n  //       size=\"large\"\n  //       sx={{ color: \"white\", mt: 2 }}\n  //     >\n  //       Chat\n  //     </Button>\n  //     <Typography mt={2}>\n  //       not this tool ? <Link to=\"/\">GO BACK</Link>\n  //     </Typography>\n  //   </form>\n\n  //   {response ? (\n  //     <Card\n  //       sx={{\n  //         mt: 4,\n  //         border: 1,\n  //         boxShadow: 0,\n  //         height: \"500px\",\n  //         borderRadius: 5,\n  //         borderColor: \"natural.medium\",\n  //         bgcolor: \"background.default\",\n  //       }}\n  //     >\n  //       <Typography p={2}>{response}</Typography>\n  //     </Card>\n  //   ) : (\n  //     <Card\n  //       sx={{\n  //         mt: 4,\n  //         border: 1,\n  //         boxShadow: 0,\n  //         height: \"500px\",\n  //         borderRadius: 5,\n  //         borderColor: \"natural.medium\",\n  //         bgcolor: \"background.default\",\n  //       }}\n  //     >\n  //       <Typography\n  //         variant=\"h5\"\n  //         color=\"natural.main\"\n  //         sx={{\n  //           textAlign: \"center\",\n  //           verticalAlign: \"middel\",\n  //           lineHeight: \"450px\",\n  //         }}\n  //       >\n  //         Bot Response\n  //       </Typography>\n  //     </Card>\n  //   )}\n  // </Box>\n  ;\n};\n_s(ChatBot, \"104N2JRr+VZjWQniCKJXbDS/0hg=\", false, function () {\n  return [useTheme, useNavigate, useMediaQuery];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","Link","useNavigate","toast","axios","Box","Typography","useTheme","useMediaQuery","TextField","Button","Alert","Collapse","Card","Fragment","_Fragment","jsxDEV","_jsxDEV","ChatBot","_s","theme","navigate","isNotMobile","text","settext","response","setResponse","error","setError","handleSubmit","e","preventDefault","data","post","console","log","err","message","setTimeout","_c","$RefreshReg$"],"sources":["C:/projects/MernStack-chatGPT-Clone-main/client/src/pages/ChatBot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport axios from \"axios\";\nimport {\n  Box,\n  Typography,\n  useTheme,\n  useMediaQuery,\n  TextField,\n  Button,\n  Alert,\n  Collapse,\n  Card,\n} from \"@mui/material\";\n\nconst ChatBot = () => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  //media\n  const isNotMobile = useMediaQuery(\"(min-width: 1000px)\");\n  // states\n  const [text, settext] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  //register ctrl\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { data } = await axios.post(\"http://localhost:5000/api/v1/openai/chatbot\", { text });\n      console.log(data);\n      setResponse(data);\n    } catch (err) {\n      console.log(error);\n      if (err.response.data.error) {\n        setError(err.response.data.error);\n      } else if (err.message) {\n        setError(err.message);\n      }\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n  return (\n    <></>\n    // <Box\n    //   width={isNotMobile ? \"40%\" : \"80%\"}\n    //   p={\"2rem\"}\n    //   m={\"2rem auto\"}\n    //   borderRadius={5}\n    //   sx={{ boxShadow: 5 }}\n    //   backgroundColor={theme.palette.background.alt}\n    // >\n    //   <Collapse in={error}>\n    //     <Alert severity=\"error\" sx={{ mb: 2 }}>\n    //       {error}\n    //     </Alert>\n    //   </Collapse>\n    //   <form onSubmit={handleSubmit}>\n    //     <Typography variant=\"h3\">Ask with Chatbot</Typography>\n\n    //     <TextField\n    //       placeholder=\"add your text\"\n    //       type=\"text\"\n    //       multiline={true}\n    //       required\n    //       margin=\"normal\"\n    //       fullWidth\n    //       value={text}\n    //       onChange={(e) => {\n    //         settext(e.target.value);\n    //       }}\n    //     />\n\n    //     <Button\n    //       type=\"submit\"\n    //       fullWidth\n    //       variant=\"contained\"\n    //       size=\"large\"\n    //       sx={{ color: \"white\", mt: 2 }}\n    //     >\n    //       Chat\n    //     </Button>\n    //     <Typography mt={2}>\n    //       not this tool ? <Link to=\"/\">GO BACK</Link>\n    //     </Typography>\n    //   </form>\n\n    //   {response ? (\n    //     <Card\n    //       sx={{\n    //         mt: 4,\n    //         border: 1,\n    //         boxShadow: 0,\n    //         height: \"500px\",\n    //         borderRadius: 5,\n    //         borderColor: \"natural.medium\",\n    //         bgcolor: \"background.default\",\n    //       }}\n    //     >\n    //       <Typography p={2}>{response}</Typography>\n    //     </Card>\n    //   ) : (\n    //     <Card\n    //       sx={{\n    //         mt: 4,\n    //         border: 1,\n    //         boxShadow: 0,\n    //         height: \"500px\",\n    //         borderRadius: 5,\n    //         borderColor: \"natural.medium\",\n    //         bgcolor: \"background.default\",\n    //       }}\n    //     >\n    //       <Typography\n    //         variant=\"h5\"\n    //         color=\"natural.main\"\n    //         sx={{\n    //           textAlign: \"center\",\n    //           verticalAlign: \"middel\",\n    //           lineHeight: \"450px\",\n    //         }}\n    //       >\n    //         Bot Response\n    //       </Typography>\n    //     </Card>\n    //   )}\n    // </Box>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,GAAG,EACHC,UAAU,EACVC,QAAQ,EACRC,aAAa,EACbC,SAAS,EACTC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,IAAI,QACC,eAAe;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,KAAK,GAAGb,QAAQ,EAAE;EACxB,MAAMc,QAAQ,GAAGnB,WAAW,EAAE;EAC9B;EACA,MAAMoB,WAAW,GAAGd,aAAa,CAAC,qBAAqB,CAAC;EACxD;EACA,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM6B,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,6CAA6C,EAAE;QAAEV;MAAK,CAAC,CAAC;MAC1FW,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBN,WAAW,CAACM,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZF,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;MAClB,IAAIS,GAAG,CAACX,QAAQ,CAACO,IAAI,CAACL,KAAK,EAAE;QAC3BC,QAAQ,CAACQ,GAAG,CAACX,QAAQ,CAACO,IAAI,CAACL,KAAK,CAAC;MACnC,CAAC,MAAM,IAAIS,GAAG,CAACC,OAAO,EAAE;QACtBT,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC;MACvB;MACAC,UAAU,CAAC,MAAM;QACfV,QAAQ,CAAC,EAAE,CAAC;MACd,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;EACD,oBACEX,OAAA,CAAAF,SAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ,CAAC;AAACI,EAAA,CAnHID,OAAO;EAAA,QACGX,QAAQ,EACLL,WAAW,EAERM,aAAa;AAAA;AAAA+B,EAAA,GAJ7BrB,OAAO;AAqHb,eAAeA,OAAO;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}